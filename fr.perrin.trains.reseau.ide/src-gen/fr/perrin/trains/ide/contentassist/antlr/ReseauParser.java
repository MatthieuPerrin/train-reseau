/*
 * generated by Xtext 2.20.0
 */
package fr.perrin.trains.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.perrin.trains.ide.contentassist.antlr.internal.InternalReseauParser;
import fr.perrin.trains.services.ReseauGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ReseauParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ReseauGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ReseauGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
			builder.put(grammarAccess.getAdditionAccess().getAlternatives_1_0(), "rule__Addition__Alternatives_1_0");
			builder.put(grammarAccess.getMultiplicationAccess().getAlternatives_1_0(), "rule__Multiplication__Alternatives_1_0");
			builder.put(grammarAccess.getPuissanceAccess().getAlternatives_1(), "rule__Puissance__Alternatives_1");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
			builder.put(grammarAccess.getSegmentPartAccess().getNextAlternatives_1_0(), "rule__SegmentPart__NextAlternatives_1_0");
			builder.put(grammarAccess.getDeclarationPointAccess().getGroup(), "rule__DeclarationPoint__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1_0_0(), "rule__Addition__Group_1_0_0__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1_0_1(), "rule__Addition__Group_1_0_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1_0_0(), "rule__Multiplication__Group_1_0_0__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1_0_1(), "rule__Multiplication__Group_1_0_1__0");
			builder.put(grammarAccess.getPuissanceAccess().getGroup(), "rule__Puissance__Group__0");
			builder.put(grammarAccess.getPuissanceAccess().getGroup_1_0(), "rule__Puissance__Group_1_0__0");
			builder.put(grammarAccess.getPuissanceAccess().getGroup_1_1(), "rule__Puissance__Group_1_1__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_0(), "rule__PrimaryExpression__Group_0__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_0_2(), "rule__PrimaryExpression__Group_0_2__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_1(), "rule__PrimaryExpression__Group_1__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_2(), "rule__PrimaryExpression__Group_2__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_3(), "rule__PrimaryExpression__Group_3__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_4(), "rule__PrimaryExpression__Group_4__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_5(), "rule__PrimaryExpression__Group_5__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_6(), "rule__PrimaryExpression__Group_6__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_7(), "rule__PrimaryExpression__Group_7__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_8(), "rule__PrimaryExpression__Group_8__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_9(), "rule__PrimaryExpression__Group_9__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_10(), "rule__PrimaryExpression__Group_10__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_11(), "rule__PrimaryExpression__Group_11__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_12(), "rule__PrimaryExpression__Group_12__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_13(), "rule__PrimaryExpression__Group_13__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_14(), "rule__PrimaryExpression__Group_14__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_15(), "rule__PrimaryExpression__Group_15__0");
			builder.put(grammarAccess.getSegmentAccess().getGroup(), "rule__Segment__Group__0");
			builder.put(grammarAccess.getSegmentPartAccess().getGroup(), "rule__SegmentPart__Group__0");
			builder.put(grammarAccess.getUnidirAccess().getGroup(), "rule__Unidir__Group__0");
			builder.put(grammarAccess.getBidirAccess().getGroup(), "rule__Bidir__Group__0");
			builder.put(grammarAccess.getModelAccess().getSegmentsAssignment_0(), "rule__Model__SegmentsAssignment_0");
			builder.put(grammarAccess.getModelAccess().getPointsLiaisonAssignment_1(), "rule__Model__PointsLiaisonAssignment_1");
			builder.put(grammarAccess.getDeclarationPointAccess().getNameAssignment_0(), "rule__DeclarationPoint__NameAssignment_0");
			builder.put(grammarAccess.getDeclarationPointAccess().getXyAssignment_2(), "rule__DeclarationPoint__XyAssignment_2");
			builder.put(grammarAccess.getAdditionAccess().getRightAssignment_1_1(), "rule__Addition__RightAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1(), "rule__Multiplication__RightAssignment_1_1");
			builder.put(grammarAccess.getPuissanceAccess().getRightAssignment_1_1_2(), "rule__Puissance__RightAssignment_1_1_2");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getRightAssignment_0_2_2(), "rule__PrimaryExpression__RightAssignment_0_2_2");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_1_1(), "rule__PrimaryExpression__ValueAssignment_1_1");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_2_2(), "rule__PrimaryExpression__ValueAssignment_2_2");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getDeclAssignment_3_1(), "rule__PrimaryExpression__DeclAssignment_3_1");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_11_3(), "rule__PrimaryExpression__ValueAssignment_11_3");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_12_3(), "rule__PrimaryExpression__ValueAssignment_12_3");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_13_3(), "rule__PrimaryExpression__ValueAssignment_13_3");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_14_3(), "rule__PrimaryExpression__ValueAssignment_14_3");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_15_3(), "rule__PrimaryExpression__ValueAssignment_15_3");
			builder.put(grammarAccess.getSegmentAccess().getNameAssignment_1(), "rule__Segment__NameAssignment_1");
			builder.put(grammarAccess.getSegmentAccess().getPartsAssignment_3(), "rule__Segment__PartsAssignment_3");
			builder.put(grammarAccess.getSegmentPartAccess().getFstAssignment_0(), "rule__SegmentPart__FstAssignment_0");
			builder.put(grammarAccess.getSegmentPartAccess().getNextAssignment_1(), "rule__SegmentPart__NextAssignment_1");
			builder.put(grammarAccess.getUnidirAccess().getPtsAssignment_1(), "rule__Unidir__PtsAssignment_1");
			builder.put(grammarAccess.getBidirAccess().getPtsAssignment_1(), "rule__Bidir__PtsAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ReseauGrammarAccess grammarAccess;

	@Override
	protected InternalReseauParser createParser() {
		InternalReseauParser result = new InternalReseauParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ReseauGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ReseauGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
