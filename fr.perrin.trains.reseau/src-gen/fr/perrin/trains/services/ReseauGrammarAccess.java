/*
 * generated by Xtext 2.20.0
 */
package fr.perrin.trains.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ReseauGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.perrin.trains.Reseau.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSegmentsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSegmentsSegmentParserRuleCall_0_0 = (RuleCall)cSegmentsAssignment_0.eContents().get(0);
		private final Assignment cPointsLiaisonAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPointsLiaisonDeclarationPointParserRuleCall_1_0 = (RuleCall)cPointsLiaisonAssignment_1.eContents().get(0);
		
		//Model:
		//	(segments+=Segment | pointsLiaison+=DeclarationPoint)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(segments+=Segment | pointsLiaison+=DeclarationPoint)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//segments+=Segment
		public Assignment getSegmentsAssignment_0() { return cSegmentsAssignment_0; }
		
		//Segment
		public RuleCall getSegmentsSegmentParserRuleCall_0_0() { return cSegmentsSegmentParserRuleCall_0_0; }
		
		//pointsLiaison+=DeclarationPoint
		public Assignment getPointsLiaisonAssignment_1() { return cPointsLiaisonAssignment_1; }
		
		//DeclarationPoint
		public RuleCall getPointsLiaisonDeclarationPointParserRuleCall_1_0() { return cPointsLiaisonDeclarationPointParserRuleCall_1_0; }
	}
	public class DeclarationPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.perrin.trains.Reseau.DeclarationPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXyPointParserRuleCall_2_0 = (RuleCall)cXyAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DeclarationPoint:
		//	name=ID '=' xy=Point ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' xy=Point ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//xy=Point
		public Assignment getXyAssignment_2() { return cXyAssignment_2; }
		
		//Point
		public RuleCall getXyPointParserRuleCall_2_0() { return cXyPointParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.perrin.trains.Reseau.Point");
		private final RuleCall cAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Point:
		//	Addition;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall() { return cAdditionParserRuleCall; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.perrin.trains.Reseau.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition Point:
		//	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.perrin.trains.Reseau.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPuissanceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPuissanceParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication Point:
		//	Puissance (({Multi.left=current} '*' | {Div.left=current} '/') right=Puissance)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Puissance (({Multi.left=current} '*' | {Div.left=current} '/') right=Puissance)*
		public Group getGroup() { return cGroup; }
		
		//Puissance
		public RuleCall getPuissanceParserRuleCall_0() { return cPuissanceParserRuleCall_0; }
		
		//(({Multi.left=current} '*' | {Div.left=current} '/') right=Puissance)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Multi.left=current} '*' | {Div.left=current} '/')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Multi.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Multi.left=current}
		public Action getMultiLeftAction_1_0_0_0() { return cMultiLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Div.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=Puissance
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Puissance
		public RuleCall getRightPuissanceParserRuleCall_1_1_0() { return cRightPuissanceParserRuleCall_1_1_0; }
	}
	public class PuissanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.perrin.trains.Reseau.Puissance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cDegreeLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cDegreeSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cPowLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//Puissance Point:
		//	PrimaryExpression ({Degree.left=current} '°' | {Pow.left=current} '^' right=PrimaryExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({Degree.left=current} '°' | {Pow.left=current} '^' right=PrimaryExpression)?
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({Degree.left=current} '°' | {Pow.left=current} '^' right=PrimaryExpression)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{Degree.left=current} '°'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Degree.left=current}
		public Action getDegreeLeftAction_1_0_0() { return cDegreeLeftAction_1_0_0; }
		
		//'°'
		public Keyword getDegreeSignKeyword_1_0_1() { return cDegreeSignKeyword_1_0_1; }
		
		//{Pow.left=current} '^' right=PrimaryExpression
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Pow.left=current}
		public Action getPowLeftAction_1_1_0() { return cPowLeftAction_1_1_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_1_1() { return cCircumflexAccentKeyword_1_1_1; }
		
		//right=PrimaryExpression
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_2_0() { return cRightPrimaryExpressionParserRuleCall_1_1_2_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.perrin.trains.Reseau.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cPointParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Action cCoordonneeLiteralLeftAction_0_2_0 = (Action)cGroup_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Assignment cRightAssignment_0_2_2 = (Assignment)cGroup_0_2.eContents().get(2);
		private final RuleCall cRightPointParserRuleCall_0_2_2_0 = (RuleCall)cRightAssignment_0_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumberLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueNUMBERTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNegativeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValuePrimaryExpressionParserRuleCall_2_2_0 = (RuleCall)cValueAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cDeclaredAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cDeclAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cDeclDeclarationPointCrossReference_3_1_0 = (CrossReference)cDeclAssignment_3_1.eContents().get(0);
		private final RuleCall cDeclDeclarationPointIDTerminalRuleCall_3_1_0_1 = (RuleCall)cDeclDeclarationPointCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cDernierAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cTildeKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cNordAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cNordKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cSudAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cSudKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cEstAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cEstKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cOuestAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cOuestKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cPiAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cPiKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cEulerAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cEKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cIAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Keyword cIKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cXAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Keyword cXKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_12_2 = (Keyword)cGroup_12.eContents().get(2);
		private final Assignment cValueAssignment_12_3 = (Assignment)cGroup_12.eContents().get(3);
		private final RuleCall cValuePointParserRuleCall_12_3_0 = (RuleCall)cValueAssignment_12_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12_4 = (Keyword)cGroup_12.eContents().get(4);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cYAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Keyword cYKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Assignment cValueAssignment_13_3 = (Assignment)cGroup_13.eContents().get(3);
		private final RuleCall cValuePointParserRuleCall_13_3_0 = (RuleCall)cValueAssignment_13_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13_4 = (Keyword)cGroup_13.eContents().get(4);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cLongueurAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Keyword cLongueurKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_14_2 = (Keyword)cGroup_14.eContents().get(2);
		private final Assignment cValueAssignment_14_3 = (Assignment)cGroup_14.eContents().get(3);
		private final RuleCall cValuePointParserRuleCall_14_3_0 = (RuleCall)cValueAssignment_14_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_14_4 = (Keyword)cGroup_14.eContents().get(4);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Action cAngleAction_15_0 = (Action)cGroup_15.eContents().get(0);
		private final Keyword cAngleKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Assignment cValueAssignment_15_3 = (Assignment)cGroup_15.eContents().get(3);
		private final RuleCall cValuePointParserRuleCall_15_3_0 = (RuleCall)cValueAssignment_15_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15_4 = (Keyword)cGroup_15.eContents().get(4);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final Action cArgumentAction_16_0 = (Action)cGroup_16.eContents().get(0);
		private final Keyword cArgumentKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_16_2 = (Keyword)cGroup_16.eContents().get(2);
		private final Assignment cValueAssignment_16_3 = (Assignment)cGroup_16.eContents().get(3);
		private final RuleCall cValuePointParserRuleCall_16_3_0 = (RuleCall)cValueAssignment_16_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_16_4 = (Keyword)cGroup_16.eContents().get(4);
		private final Group cGroup_17 = (Group)cAlternatives.eContents().get(17);
		private final Action cIntersectionAction_17_0 = (Action)cGroup_17.eContents().get(0);
		private final Assignment cL1Assignment_17_1 = (Assignment)cGroup_17.eContents().get(1);
		private final RuleCall cL1LigneParserRuleCall_17_1_0 = (RuleCall)cL1Assignment_17_1.eContents().get(0);
		private final Keyword cInterKeyword_17_2 = (Keyword)cGroup_17.eContents().get(2);
		private final Assignment cL2Assignment_17_3 = (Assignment)cGroup_17.eContents().get(3);
		private final RuleCall cL2LigneParserRuleCall_17_3_0 = (RuleCall)cL2Assignment_17_3.eContents().get(0);
		
		//PrimaryExpression Point:
		//	'(' Point ({CoordonneeLiteral.left=current} ',' right=Point)? ')'
		//	| {NumberLiteral} value=NUMBER
		//	| {Negative} '-' value=PrimaryExpression
		//	| {Declared} Decl=[DeclarationPoint] | {Dernier} '~'
		//	| {Nord} 'nord'
		//	| {Sud} 'sud'
		//	| {Est} 'est'
		//	| {Ouest} 'ouest'
		//	| {Pi} 'pi'
		//	| {Euler} 'e'
		//	| {I} 'i'
		//	| {X} 'x' '(' value=Point ')'
		//	| {Y} 'y' '(' value=Point ')'
		//	| {Longueur} 'longueur' '(' value=Point ')'
		//	| {Angle} 'angle' '(' value=Point ')'
		//	| {Argument} 'argument' '(' value=Point ')'
		//	| {Intersection} l1=Ligne 'inter' l2=Ligne;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Point ({CoordonneeLiteral.left=current} ',' right=Point)? ')' | {NumberLiteral} value=NUMBER | {Negative} '-'
		//value=PrimaryExpression | {Declared} Decl=[DeclarationPoint] | {Dernier} '~' | {Nord} 'nord' | {Sud} 'sud' | {Est}
		//'est' | {Ouest} 'ouest' | {Pi} 'pi' | {Euler} 'e' | {I} 'i' | {X} 'x' '(' value=Point ')' | {Y} 'y' '(' value=Point ')'
		//| {Longueur} 'longueur' '(' value=Point ')' | {Angle} 'angle' '(' value=Point ')' | {Argument} 'argument' '('
		//value=Point ')' | {Intersection} l1=Ligne 'inter' l2=Ligne
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Point ({CoordonneeLiteral.left=current} ',' right=Point)? ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Point
		public RuleCall getPointParserRuleCall_0_1() { return cPointParserRuleCall_0_1; }
		
		//({CoordonneeLiteral.left=current} ',' right=Point)?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//{CoordonneeLiteral.left=current}
		public Action getCoordonneeLiteralLeftAction_0_2_0() { return cCoordonneeLiteralLeftAction_0_2_0; }
		
		//','
		public Keyword getCommaKeyword_0_2_1() { return cCommaKeyword_0_2_1; }
		
		//right=Point
		public Assignment getRightAssignment_0_2_2() { return cRightAssignment_0_2_2; }
		
		//Point
		public RuleCall getRightPointParserRuleCall_0_2_2_0() { return cRightPointParserRuleCall_0_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//{NumberLiteral} value=NUMBER
		public Group getGroup_1() { return cGroup_1; }
		
		//{NumberLiteral}
		public Action getNumberLiteralAction_1_0() { return cNumberLiteralAction_1_0; }
		
		//value=NUMBER
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//NUMBER
		public RuleCall getValueNUMBERTerminalRuleCall_1_1_0() { return cValueNUMBERTerminalRuleCall_1_1_0; }
		
		//{Negative} '-' value=PrimaryExpression
		public Group getGroup_2() { return cGroup_2; }
		
		//{Negative}
		public Action getNegativeAction_2_0() { return cNegativeAction_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_1() { return cHyphenMinusKeyword_2_1; }
		
		//value=PrimaryExpression
		public Assignment getValueAssignment_2_2() { return cValueAssignment_2_2; }
		
		//PrimaryExpression
		public RuleCall getValuePrimaryExpressionParserRuleCall_2_2_0() { return cValuePrimaryExpressionParserRuleCall_2_2_0; }
		
		//{Declared} Decl=[DeclarationPoint]
		public Group getGroup_3() { return cGroup_3; }
		
		//{Declared}
		public Action getDeclaredAction_3_0() { return cDeclaredAction_3_0; }
		
		//Decl=[DeclarationPoint]
		public Assignment getDeclAssignment_3_1() { return cDeclAssignment_3_1; }
		
		//[DeclarationPoint]
		public CrossReference getDeclDeclarationPointCrossReference_3_1_0() { return cDeclDeclarationPointCrossReference_3_1_0; }
		
		//ID
		public RuleCall getDeclDeclarationPointIDTerminalRuleCall_3_1_0_1() { return cDeclDeclarationPointIDTerminalRuleCall_3_1_0_1; }
		
		//{Dernier} '~'
		public Group getGroup_4() { return cGroup_4; }
		
		//{Dernier}
		public Action getDernierAction_4_0() { return cDernierAction_4_0; }
		
		//'~'
		public Keyword getTildeKeyword_4_1() { return cTildeKeyword_4_1; }
		
		//{Nord} 'nord'
		public Group getGroup_5() { return cGroup_5; }
		
		//{Nord}
		public Action getNordAction_5_0() { return cNordAction_5_0; }
		
		//'nord'
		public Keyword getNordKeyword_5_1() { return cNordKeyword_5_1; }
		
		//{Sud} 'sud'
		public Group getGroup_6() { return cGroup_6; }
		
		//{Sud}
		public Action getSudAction_6_0() { return cSudAction_6_0; }
		
		//'sud'
		public Keyword getSudKeyword_6_1() { return cSudKeyword_6_1; }
		
		//{Est} 'est'
		public Group getGroup_7() { return cGroup_7; }
		
		//{Est}
		public Action getEstAction_7_0() { return cEstAction_7_0; }
		
		//'est'
		public Keyword getEstKeyword_7_1() { return cEstKeyword_7_1; }
		
		//{Ouest} 'ouest'
		public Group getGroup_8() { return cGroup_8; }
		
		//{Ouest}
		public Action getOuestAction_8_0() { return cOuestAction_8_0; }
		
		//'ouest'
		public Keyword getOuestKeyword_8_1() { return cOuestKeyword_8_1; }
		
		//{Pi} 'pi'
		public Group getGroup_9() { return cGroup_9; }
		
		//{Pi}
		public Action getPiAction_9_0() { return cPiAction_9_0; }
		
		//'pi'
		public Keyword getPiKeyword_9_1() { return cPiKeyword_9_1; }
		
		//{Euler} 'e'
		public Group getGroup_10() { return cGroup_10; }
		
		//{Euler}
		public Action getEulerAction_10_0() { return cEulerAction_10_0; }
		
		//'e'
		public Keyword getEKeyword_10_1() { return cEKeyword_10_1; }
		
		//{I} 'i'
		public Group getGroup_11() { return cGroup_11; }
		
		//{I}
		public Action getIAction_11_0() { return cIAction_11_0; }
		
		//'i'
		public Keyword getIKeyword_11_1() { return cIKeyword_11_1; }
		
		//{X} 'x' '(' value=Point ')'
		public Group getGroup_12() { return cGroup_12; }
		
		//{X}
		public Action getXAction_12_0() { return cXAction_12_0; }
		
		//'x'
		public Keyword getXKeyword_12_1() { return cXKeyword_12_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_12_2() { return cLeftParenthesisKeyword_12_2; }
		
		//value=Point
		public Assignment getValueAssignment_12_3() { return cValueAssignment_12_3; }
		
		//Point
		public RuleCall getValuePointParserRuleCall_12_3_0() { return cValuePointParserRuleCall_12_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12_4() { return cRightParenthesisKeyword_12_4; }
		
		//{Y} 'y' '(' value=Point ')'
		public Group getGroup_13() { return cGroup_13; }
		
		//{Y}
		public Action getYAction_13_0() { return cYAction_13_0; }
		
		//'y'
		public Keyword getYKeyword_13_1() { return cYKeyword_13_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_13_2() { return cLeftParenthesisKeyword_13_2; }
		
		//value=Point
		public Assignment getValueAssignment_13_3() { return cValueAssignment_13_3; }
		
		//Point
		public RuleCall getValuePointParserRuleCall_13_3_0() { return cValuePointParserRuleCall_13_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_13_4() { return cRightParenthesisKeyword_13_4; }
		
		//{Longueur} 'longueur' '(' value=Point ')'
		public Group getGroup_14() { return cGroup_14; }
		
		//{Longueur}
		public Action getLongueurAction_14_0() { return cLongueurAction_14_0; }
		
		//'longueur'
		public Keyword getLongueurKeyword_14_1() { return cLongueurKeyword_14_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_14_2() { return cLeftParenthesisKeyword_14_2; }
		
		//value=Point
		public Assignment getValueAssignment_14_3() { return cValueAssignment_14_3; }
		
		//Point
		public RuleCall getValuePointParserRuleCall_14_3_0() { return cValuePointParserRuleCall_14_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_14_4() { return cRightParenthesisKeyword_14_4; }
		
		//{Angle} 'angle' '(' value=Point ')'
		public Group getGroup_15() { return cGroup_15; }
		
		//{Angle}
		public Action getAngleAction_15_0() { return cAngleAction_15_0; }
		
		//'angle'
		public Keyword getAngleKeyword_15_1() { return cAngleKeyword_15_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_15_2() { return cLeftParenthesisKeyword_15_2; }
		
		//value=Point
		public Assignment getValueAssignment_15_3() { return cValueAssignment_15_3; }
		
		//Point
		public RuleCall getValuePointParserRuleCall_15_3_0() { return cValuePointParserRuleCall_15_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_15_4() { return cRightParenthesisKeyword_15_4; }
		
		//{Argument} 'argument' '(' value=Point ')'
		public Group getGroup_16() { return cGroup_16; }
		
		//{Argument}
		public Action getArgumentAction_16_0() { return cArgumentAction_16_0; }
		
		//'argument'
		public Keyword getArgumentKeyword_16_1() { return cArgumentKeyword_16_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_16_2() { return cLeftParenthesisKeyword_16_2; }
		
		//value=Point
		public Assignment getValueAssignment_16_3() { return cValueAssignment_16_3; }
		
		//Point
		public RuleCall getValuePointParserRuleCall_16_3_0() { return cValuePointParserRuleCall_16_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_16_4() { return cRightParenthesisKeyword_16_4; }
		
		//{Intersection} l1=Ligne 'inter' l2=Ligne
		public Group getGroup_17() { return cGroup_17; }
		
		//{Intersection}
		public Action getIntersectionAction_17_0() { return cIntersectionAction_17_0; }
		
		//l1=Ligne
		public Assignment getL1Assignment_17_1() { return cL1Assignment_17_1; }
		
		//Ligne
		public RuleCall getL1LigneParserRuleCall_17_1_0() { return cL1LigneParserRuleCall_17_1_0; }
		
		//'inter'
		public Keyword getInterKeyword_17_2() { return cInterKeyword_17_2; }
		
		//l2=Ligne
		public Assignment getL2Assignment_17_3() { return cL2Assignment_17_3; }
		
		//Ligne
		public RuleCall getL2LigneParserRuleCall_17_3_0() { return cL2LigneParserRuleCall_17_3_0; }
	}
	public class LigneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.perrin.trains.Reseau.Ligne");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLigne1ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLigne2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Ligne:
		//	Ligne1 | Ligne2;
		@Override public ParserRule getRule() { return rule; }
		
		//Ligne1 | Ligne2
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Ligne1
		public RuleCall getLigne1ParserRuleCall_0() { return cLigne1ParserRuleCall_0; }
		
		//Ligne2
		public RuleCall getLigne2ParserRuleCall_1() { return cLigne2ParserRuleCall_1; }
	}
	public class Ligne1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.perrin.trains.Reseau.Ligne1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cP1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cP1PointParserRuleCall_1_0 = (RuleCall)cP1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cP2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cP2PointParserRuleCall_3_0 = (RuleCall)cP2Assignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Ligne1:
		//	'[' p1=Point ',' p2=Point ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' p1=Point ',' p2=Point ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//p1=Point
		public Assignment getP1Assignment_1() { return cP1Assignment_1; }
		
		//Point
		public RuleCall getP1PointParserRuleCall_1_0() { return cP1PointParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//p2=Point
		public Assignment getP2Assignment_3() { return cP2Assignment_3; }
		
		//Point
		public RuleCall getP2PointParserRuleCall_3_0() { return cP2PointParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class Ligne2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.perrin.trains.Reseau.Ligne2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cP1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cP1PointParserRuleCall_1_0 = (RuleCall)cP1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cP2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cP2PointParserRuleCall_3_0 = (RuleCall)cP2Assignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Ligne2:
		//	'<' p1=Point ',' p2=Point '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' p1=Point ',' p2=Point '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//p1=Point
		public Assignment getP1Assignment_1() { return cP1Assignment_1; }
		
		//Point
		public RuleCall getP1PointParserRuleCall_1_0() { return cP1PointParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//p2=Point
		public Assignment getP2Assignment_3() { return cP2Assignment_3; }
		
		//Point
		public RuleCall getP2PointParserRuleCall_3_0() { return cP2PointParserRuleCall_3_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}
	public class SegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.perrin.trains.Reseau.Segment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSegmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPartsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPartsSegmentPartParserRuleCall_3_0 = (RuleCall)cPartsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Segment:
		//	'segment' name=ID '{'
		//	parts+=SegmentPart+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'segment' name=ID '{' parts+=SegmentPart+ '}'
		public Group getGroup() { return cGroup; }
		
		//'segment'
		public Keyword getSegmentKeyword_0() { return cSegmentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//parts+=SegmentPart+
		public Assignment getPartsAssignment_3() { return cPartsAssignment_3; }
		
		//SegmentPart
		public RuleCall getPartsSegmentPartParserRuleCall_3_0() { return cPartsSegmentPartParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SegmentPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.perrin.trains.Reseau.SegmentPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFstPointParserRuleCall_0_0 = (RuleCall)cFstAssignment_0.eContents().get(0);
		private final Assignment cNextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNextAlternatives_1_0 = (Alternatives)cNextAssignment_1.eContents().get(0);
		private final RuleCall cNextUnidirParserRuleCall_1_0_0 = (RuleCall)cNextAlternatives_1_0.eContents().get(0);
		private final RuleCall cNextBidirParserRuleCall_1_0_1 = (RuleCall)cNextAlternatives_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SegmentPart:
		//	fst=Point next=(Unidir | Bidir) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//fst=Point next=(Unidir | Bidir) ';'
		public Group getGroup() { return cGroup; }
		
		//fst=Point
		public Assignment getFstAssignment_0() { return cFstAssignment_0; }
		
		//Point
		public RuleCall getFstPointParserRuleCall_0_0() { return cFstPointParserRuleCall_0_0; }
		
		//next=(Unidir | Bidir)
		public Assignment getNextAssignment_1() { return cNextAssignment_1; }
		
		//(Unidir | Bidir)
		public Alternatives getNextAlternatives_1_0() { return cNextAlternatives_1_0; }
		
		//Unidir
		public RuleCall getNextUnidirParserRuleCall_1_0_0() { return cNextUnidirParserRuleCall_1_0_0; }
		
		//Bidir
		public RuleCall getNextBidirParserRuleCall_1_0_1() { return cNextBidirParserRuleCall_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class UnidirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.perrin.trains.Reseau.Unidir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPtsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPtsPointParserRuleCall_1_0 = (RuleCall)cPtsAssignment_1.eContents().get(0);
		
		//Unidir:
		//	('->' pts+=Point)+;
		@Override public ParserRule getRule() { return rule; }
		
		//('->' pts+=Point)+
		public Group getGroup() { return cGroup; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }
		
		//pts+=Point
		public Assignment getPtsAssignment_1() { return cPtsAssignment_1; }
		
		//Point
		public RuleCall getPtsPointParserRuleCall_1_0() { return cPtsPointParserRuleCall_1_0; }
	}
	public class BidirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.perrin.trains.Reseau.Bidir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPtsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPtsPointParserRuleCall_1_0 = (RuleCall)cPtsAssignment_1.eContents().get(0);
		
		//Bidir:
		//	('<->' pts+=Point)+;
		@Override public ParserRule getRule() { return rule; }
		
		//('<->' pts+=Point)+
		public Group getGroup() { return cGroup; }
		
		//'<->'
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_0() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_0; }
		
		//pts+=Point
		public Assignment getPtsAssignment_1() { return cPtsAssignment_1; }
		
		//Point
		public RuleCall getPtsPointParserRuleCall_1_0() { return cPtsPointParserRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final DeclarationPointElements pDeclarationPoint;
	private final PointElements pPoint;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PuissanceElements pPuissance;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final LigneElements pLigne;
	private final Ligne1Elements pLigne1;
	private final Ligne2Elements pLigne2;
	private final TerminalRule tNUMBER;
	private final TerminalRule tINT;
	private final SegmentElements pSegment;
	private final SegmentPartElements pSegmentPart;
	private final UnidirElements pUnidir;
	private final BidirElements pBidir;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReseauGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDeclarationPoint = new DeclarationPointElements();
		this.pPoint = new PointElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPuissance = new PuissanceElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pLigne = new LigneElements();
		this.pLigne1 = new Ligne1Elements();
		this.pLigne2 = new Ligne2Elements();
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.perrin.trains.Reseau.NUMBER");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.perrin.trains.Reseau.INT");
		this.pSegment = new SegmentElements();
		this.pSegmentPart = new SegmentPartElements();
		this.pUnidir = new UnidirElements();
		this.pBidir = new BidirElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.perrin.trains.Reseau".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(segments+=Segment | pointsLiaison+=DeclarationPoint)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//DeclarationPoint:
	//	name=ID '=' xy=Point ';';
	public DeclarationPointElements getDeclarationPointAccess() {
		return pDeclarationPoint;
	}
	
	public ParserRule getDeclarationPointRule() {
		return getDeclarationPointAccess().getRule();
	}
	
	//Point:
	//	Addition;
	public PointElements getPointAccess() {
		return pPoint;
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}
	
	//Addition Point:
	//	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication Point:
	//	Puissance (({Multi.left=current} '*' | {Div.left=current} '/') right=Puissance)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Puissance Point:
	//	PrimaryExpression ({Degree.left=current} '°' | {Pow.left=current} '^' right=PrimaryExpression)?;
	public PuissanceElements getPuissanceAccess() {
		return pPuissance;
	}
	
	public ParserRule getPuissanceRule() {
		return getPuissanceAccess().getRule();
	}
	
	//PrimaryExpression Point:
	//	'(' Point ({CoordonneeLiteral.left=current} ',' right=Point)? ')'
	//	| {NumberLiteral} value=NUMBER
	//	| {Negative} '-' value=PrimaryExpression
	//	| {Declared} Decl=[DeclarationPoint] | {Dernier} '~'
	//	| {Nord} 'nord'
	//	| {Sud} 'sud'
	//	| {Est} 'est'
	//	| {Ouest} 'ouest'
	//	| {Pi} 'pi'
	//	| {Euler} 'e'
	//	| {I} 'i'
	//	| {X} 'x' '(' value=Point ')'
	//	| {Y} 'y' '(' value=Point ')'
	//	| {Longueur} 'longueur' '(' value=Point ')'
	//	| {Angle} 'angle' '(' value=Point ')'
	//	| {Argument} 'argument' '(' value=Point ')'
	//	| {Intersection} l1=Ligne 'inter' l2=Ligne;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//Ligne:
	//	Ligne1 | Ligne2;
	public LigneElements getLigneAccess() {
		return pLigne;
	}
	
	public ParserRule getLigneRule() {
		return getLigneAccess().getRule();
	}
	
	//Ligne1:
	//	'[' p1=Point ',' p2=Point ']';
	public Ligne1Elements getLigne1Access() {
		return pLigne1;
	}
	
	public ParserRule getLigne1Rule() {
		return getLigne1Access().getRule();
	}
	
	//Ligne2:
	//	'<' p1=Point ',' p2=Point '>';
	public Ligne2Elements getLigne2Access() {
		return pLigne2;
	}
	
	public ParserRule getLigne2Rule() {
		return getLigne2Access().getRule();
	}
	
	//terminal NUMBER returns ecore::EDouble:
	//	'0'..'9'+ ('.' '0'..'9'+)?;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//@Override
	//terminal INT returns ecore::EInt:
	//	'this one has been deactivated';
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//Segment:
	//	'segment' name=ID '{'
	//	parts+=SegmentPart+
	//	'}';
	public SegmentElements getSegmentAccess() {
		return pSegment;
	}
	
	public ParserRule getSegmentRule() {
		return getSegmentAccess().getRule();
	}
	
	//SegmentPart:
	//	fst=Point next=(Unidir | Bidir) ';';
	public SegmentPartElements getSegmentPartAccess() {
		return pSegmentPart;
	}
	
	public ParserRule getSegmentPartRule() {
		return getSegmentPartAccess().getRule();
	}
	
	//Unidir:
	//	('->' pts+=Point)+;
	public UnidirElements getUnidirAccess() {
		return pUnidir;
	}
	
	public ParserRule getUnidirRule() {
		return getUnidirAccess().getRule();
	}
	
	//Bidir:
	//	('<->' pts+=Point)+;
	public BidirElements getBidirAccess() {
		return pBidir;
	}
	
	public ParserRule getBidirRule() {
		return getBidirAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
